version: '3'

services:
  api:
    image: registry.pinigseu.xyz/jumpcut/jumpcut/api:latest
    command: uwsgi --emperor  /code/uwsgi --gid nginx --die-on-term
    build: ./backend
    container_name: api
    networks:
    - proxy
    - db
    volumes:
    - staticdata:/code/src/static/
    ports:
    - 7070:7070
    - 8000:8000
    env_file: ./backend/.env
    depends_on:
    - db
    - redis
    restart: always
  celerybeat:
    image: registry.pinigseu.xyz/jumpcut/jumpcut/api:latest
    command: celery beat --workdir /code/src -A jumpcut -l info
    container_name: celerybeat
    networks:
    - proxy
    - db
    volumes:
    - ./backend/src:/code/src
    env_file: ./backend/.env
    environment:
      C_FORCE_ROOT: 'true'
      DJANGO_SETTINGS_MODULE: jumpcut.settings.www_settings
      PYTHONPATH: /code/src
    depends_on:
    - celeryworker
    - db
    - redis
  celeryworker:
    image: registry.pinigseu.xyz/jumpcut/jumpcut/api:latest
    command: celery worker --workdir /code/src -A jumpcut -l info
    container_name: celeryworker
    networks:
    - proxy
    - db
    volumes:
    - ./backend/src:/code/src
    env_file: ./backend/.env
    environment:
      C_FORCE_ROOT: 'true'
      DJANGO_SETTINGS_MODULE: jumpcut.settings.www_settings
      PYTHONPATH: /code/src
    depends_on:
    - api
    - db
    - redis
  nginx_react:
    image: registry.pinigseu.xyz/jumpcut/jumpcut/react:prod
    build:
      context: ./frontend
      dockerfile: ./production/Dockerfile
    container_name: nginx_react
    depends_on:
    - api
    environment:
     - NODE_ENV=production
     - APIURL=https://api.pinigseu.xyz
    ports:
    - 443:443
    - 80:80
    restart: always
    networks:
    - proxy
    volumes:
    - ./nginx/conf.d:/etc/nginx/conf.d
    - staticdata:/static/
  db:
    image: postgres:alpine
    container_name: db
    volumes:
    - pgdata:/var/lib/postgresql/data/
    networks:
    - db
    ports:
    - 5432:5432
    env_file: ./backend/.env
    restart: always
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - 'redisdata:/data'
    restart: always
    networks:
    - proxy
networks:
  proxy:
    driver: bridge
  db:
    driver: bridge
volumes:
  pgdata:
  staticdata:
  redisdata:  
