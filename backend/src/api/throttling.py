# -*- coding: utf-8 -*-

from rest_framework.throttling import SimpleRateThrottle

from django.core.exceptions import ImproperlyConfigured


class ScopedUserRateThrottle(SimpleRateThrottle):
    """
    Limits the rate of API calls by different amounts for various parts of
    the API.  Views must set the `throttle_scope` property.  The unique cache
    key will be generated by concatenating the user id of the request, and
    the scope of the view being accessed.
    """
    scope_attr = 'throttle_scope'

    def __init__(self):
        # Override the usual SimpleRateThrottle, because we can't determine
        # the rate until called by the view.
        pass

    def allow_request(self, request, view):

        self.scope = getattr(view, self.scope_attr, None)

        if not self.scope:
            raise ImproperlyConfigured(
                "The {class_name} class assumes that the `{scope_attr}` property is defined on the view.".format(
                    class_name=self.__class__.__name__,
                    scope_attr=self.scope_attr,
                )
            )
        if not request.user.is_authenticated:
            raise ImproperlyConfigured(
                "The {class_name} class assumes that user authentication is enforced by the view.".format(
                    class_name=self.__class__.__name__,
                )
            )

        # Determine the allowed request rate
        self.rate = self.get_rate()
        self.num_requests, self.duration = self.parse_rate(self.rate)

        # We can now proceed as normal.
        return super().allow_request(request, view)

    def get_cache_key(self, request, view):
        """
        Generate the unique cache key by concatenating the user id
        with the '.throttle_scope` property of the view.
        """
        return self.cache_format % {
            'scope': self.scope,
            'ident': request.user.pk,
        }
