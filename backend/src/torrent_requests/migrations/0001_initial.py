# Generated by Django 2.0.4 on 2018-05-10 03:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('torrents', '0002_auto_20180510_0335'),
        ('media_formats', '0001_initial'),
        ('imdb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RequestComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='requestcomments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TorrentRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('film_title', models.CharField(max_length=1024)),
                ('film_year', models.PositiveSmallIntegerField(null=True)),
                ('description', models.TextField()),
                ('release_name', models.CharField(max_length=255)),
                ('requester_followed_through', models.BooleanField(default=False)),
                ('is_source', models.BooleanField(default=False)),
                ('codec', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_requests', to='media_formats.Codec')),
                ('container', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_requests', to='media_formats.Container')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_requests', to=settings.AUTH_USER_MODEL)),
                ('filling_torrent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requests_filled', to='torrents.Torrent')),
                ('imdb', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='imdb.FilmIMDb')),
                ('resolution', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_requests', to='media_formats.Resolution')),
                ('source_media', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_requests', to='media_formats.SourceMedia')),
            ],
            options={
                'permissions': (('can_request', 'Can make new torrent requests'),),
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bounty_in_bytes', models.BigIntegerField(default=0)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='torrent_request_votes', to=settings.AUTH_USER_MODEL)),
                ('torrent_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='torrent_requests.TorrentRequest')),
            ],
            options={
                'permissions': (('can_vote', 'Can vote on torrent requests'),),
            },
        ),
        migrations.AddField(
            model_name='requestcomment',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='torrent_requests.TorrentRequest'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('author', 'torrent_request')},
        ),
    ]
