image: python:3.6
services:
 - postgres
 - docker:dind
 - redis:latest
stages:
 - test_api
 - test_react
 - review
 - docs
 - build
 - deploy
variables:
  DOCKER_DRIVER: overlay2
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  CONTAINER_API_IMAGE: "registry.pinigseu.xyz/jumpcut/jumpcut/api"
  CONTAINER_FRONTEND_IMAGE: "registry.pinigseu.xyz/jumpcut/jumpcut/react"
  CONTAINER_TAG: "latest"
  CONTAINER_DEV_TAG: "dev"
  CONTAINER_PRODUCTION_TAG: "prod"
  CONTAINER_API_RELEASE_IMAGE: "$CONTAINER_API_IMAGE:$CONTAINER_TAG"
  CONTAINER_REACT_RELEASE_IMAGE: "$CONTAINER_FRONTEND_IMAGE:$CONTAINER_PRODUCTION_TAG"
  CONTAINER_REACT_DEV_IMAGE: "$CONTAINER_FRONTEND_IMAGE:$CONTAINER_DEV_TAG"
  ALLOWED_HOSTS: "*"
  DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
  DEBUG: "True"
  PRODUCTION: "False"
  REDIS_URL: "redis://redis:6379"
  SECRET_KEY: "jumpcut"
  TESTING_DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
  TESTING_WSGI_APPLICATION: "jumpcut.www_wsgi.application"
cache:
  paths:
    - .cache/
    - venv/
before_script:
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r backend/requirements.txt
  - pip install -r backend/testing_requirements.txt
python_linter:
  stage: test_api
  script:
    - cd backend
    - invoke run-python-linter
    - cd .. 
    - echo "done"!!
python_tests:
  stage: test_api
  script:
    # Test for missing migrations
    - backend/src/manage.py makemigrations --check --dry-run || (echo "Missing migrations"; false)
    - cd backend
    - invoke migrate
    - invoke foundation
    - invoke fixtures
    - invoke run-python-tests --coverage
    - cd ..
    - echo "done!!"
test_react:
  image: node:latest
  stage: test_react
  before_script:
    - cd frontend
    - yarn
  cache:
    paths:
    - node_modules/
  script:
     - yarn run test
start_review:
  image: debian:stretch-slim
  stage: review
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_REVIEW_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ronzertnert.me >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - rsync -av . --delete /code/$CI_ENVIRONMENT_SLUG
    - ssh "$SSH_REVIEW_DESTINATION"
    - chmod +x ./scripts/create-review.sh
    - ./scripts/create-review.sh
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$REVIEW_APPS_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
  tags:
    - review
    - review-app
    - dev
stop_review:
  stage: review
  before_script:
    - echo "Removing Review app and Directory"
  script:
    - chmod +x ./scripts/delete-review.sh
    - ./scripts/delete-review.sh
    - sudo rm -rf /code/$CI_ENVIRONMENT_SLUG
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  tags:
    - review
    - review-app
    - dev
pages:
  stage: docs
  script:
  - make --directory backend/docs html
  - mkdir public
  - cp README.rst backend/docs/readme.rst
  - cp -r backend/docs/_build/html/* public/
  artifacts:
    paths:
    - public
  only:
  - master
build_staging:
  image: tmaier/docker-compose:latest
  variables:
    DOCKER_DRIVER: overlay2
    FRONTEND_DIR: /builds/jumpcut/jumpcut/frontend
    BACKEND_DIR: /builds/jumpcut/jumpcut/backend
    PROD_DOCKER_FILE: production/Dockerfile
    CONTAINER_API_IMAGE: "registry.pinigseu.xyz/jumpcut/jumpcut/api"
    CONTAINER_FRONTEND_IMAGE: "registry.pinigseu.xyz/jumpcut/jumpcut/react"
    CONTAINER_TAG: "latest"
    CONTAINER_DEV_TAG: "dev"
    CONTAINER_PRODUCTION_TAG: "prod"
    CONTAINER_API_RELEASE_IMAGE: "$CONTAINER_API_IMAGE:$CONTAINER_TAG"
    CONTAINER_REACT_RELEASE_IMAGE: "$CONTAINER_FRONTEND_IMAGE:$CONTAINER_PRODUCTION_TAG"
    CONTAINER_REACT_DEV_IMAGE: "$CONTAINER_FRONTEND_IMAGE:$CONTAINER_DEV_TAG"
    ALLOWED_HOSTS: "*"
    DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
    DEBUG: "True"
    PRODUCTION: "False"
    REDIS_URL: "redis://redis:6379"
    SECRET_KEY: "jumpcut"
    TESTING_DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
    TESTING_WSGI_APPLICATION: "jumpcut.www_wsgi.application"
  stage: build
  cache: {}
  before_script:
      - docker-compose --version
      - docker version
      - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - echo "$CONTAINER_REACT_RELEASE_IMAGE"
    - cd $FRONTEND_DIR
    - cp .env.template .env
    - docker build --pull -t $CONTAINER_REACT_RELEASE_IMAGE -f $PROD_DOCKER_FILE .
    - docker build --pull -t $CONTAINER_REACT_DEV_IMAGE -f .
    - cd $BACKEND_DIR
    - cp .env.template .env
    - docker build --pull -t $CONTAINER_API_RELEASE_IMAGE -f .
    - docker push $CONTAINER_API_RELEASE_IMAGE
    - docker push $CONTAINER_REACT_RELEASE_IMAGE
    - docker push $CONTAINER_REACT_DEV_IMAGE
  tags:
    - latest
    - master
    - release
    - staging
  only:
    - master # TODO include staging as well.
deploy_staging:
  stage: deploy
  cache: {}
  before_script:
    # https://docs.gitlab.com/ee/ci/ssh_keys/
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > key
    - chmod 700 key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -i key "$SSH_DESTINATION"
  only:
    - master

# TODO add deployment for production.
